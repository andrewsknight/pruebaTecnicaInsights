version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: call_assignment
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d call_assignment"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache (commented out - using local Redis)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 5

  # Call Assignment API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    network_mode: "host"
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@localhost:5432/call_assignment
      - REDIS_URL=redis://localhost:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8000
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    command: python src/main.py api --host 0.0.0.0 --port 8000
    depends_on:
      postgres:
        condition: service_healthy

  # Mock Webhook Receiver (for testing)
  webhook-receiver:
    build:
      context: .
      dockerfile: Dockerfile.webhook
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with basic metrics (optional - disabled for initial setup)
  # Uncomment after creating monitoring/prometheus.yml
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   depends_on:
  #     - api

  # Grafana for visualization (optional - disabled for initial setup)
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
  #   depends_on:
  #     - prometheus

volumes:
  postgres_data:
  # redis_data:  # Using local Redis
  # prometheus_data:  # Disabled for initial setup
  # grafana_data:     # Disabled for initial setup

networks:
  default:
    name: call-assignment-network